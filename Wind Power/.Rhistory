results3[3,5] =round(gamma.function(data$wd30)$CI1[2],2)
results3[3,6] =round(gamma.function(data$wd30)$CI2[1],2)
results3[3,7] =round(gamma.function(data$wd30)$CI2[2],2)
results3 %>%kbl() %>%kable_styling(full_width = FALSE)
results4 =matrix(NA,ncol=7, nrow=3)
colnames(results4) = c("Log Normal Distribution for"," Optimal Mean Log", "Optimal Sd Log", "Lower CI Mean Log", "Upper CI Mean Log", "Lower CI Sd Log", "Upper CI Sd Log")
results4[1:3,1]=c("Power Obs", "Wind Speed", "Wind direction")
results4[1,2] =round(log.normal.function(data$pow.obs.norm)$opt$par[1],2)
results4[1,3] =round(log.normal.function(data$pow.obs.norm)$opt$par[2],2)
results4[1,4] =round(log.normal.function(data$pow.obs.norm)$CI1[1],2)
results4[1,5] =round(log.normal.function(data$pow.obs.norm)$CI1[2],2)
results4[1,6] =round(log.normal.function(data$pow.obs.norm)$CI2[1],2)
results4[1,7] =round(log.normal.function(data$pow.obs.norm)$CI2[2],2)
results4[2,2] =round(log.normal.function(data$ws30)$opt$par[1],2)
results4[2,3] =round(log.normal.function(data$ws30)$opt$par[2],2)
results4[2,4] =round(log.normal.function(data$ws30)$CI1[1],2)
results4[2,5] =round(log.normal.function(data$ws30)$CI1[2],2)
results4[2,6] =round(log.normal.function(data$ws30)$CI2[1],2)
results4[2,7] =round(log.normal.function(data$ws30)$CI2[2],2)
results4[3,2] =round(log.normal.function(data$wd30)$opt$par[1],2)
results4[3,3] =round(log.normal.function(data$wd30)$opt$par[2],2)
results4[3,4] =round(log.normal.function(data$wd30)$CI1[1],2)
results4[3,5] =round(log.normal.function(data$wd30)$CI1[2],2)
results4[3,6] =round(log.normal.function(data$wd30)$CI2[1],2)
results4[3,7] =round(log.normal.function(data$wd30)$CI2[2],2)
results4 %>%kbl() %>%kable_styling(full_width = FALSE)
results5 =matrix(NA,ncol=7, nrow=6)
colnames(results5) = c("Normal Distribution for"," Optimal Mean ", "Optimal Sd ", "Lower CI Mean ", "Upper CI Mean ", "Lower CI Sd ", "Upper CI Sd ")
results5[1:6,1]=c("Power Obs", "Wind Speed", "Wind direction", "Boxcox","Trans 1","Trans 2")
results5[1,2] =round(normal.function(data$pow.obs.norm)$opt$par[1],2)
results5[1,3] =round(normal.function(data$pow.obs.norm)$opt$par[2],2)
results5[1,4] =round(normal.function(data$pow.obs.norm)$CI1[1],2)
results5[1,5] =round(normal.function(data$pow.obs.norm)$CI1[2],2)
results5[1,6] =round(normal.function(data$pow.obs.norm)$CI2[1],2)
results5[1,7] =round(normal.function(data$pow.obs.norm)$CI2[2],2)
results5[2,2] =round(normal.function(data$ws30)$opt$par[1],2)
results5[2,3] =round(normal.function(data$ws30)$opt$par[2],2)
results5[2,4] =round(normal.function(data$ws30)$CI1[1],2)
results5[2,5] =round(normal.function(data$ws30)$CI1[2],2)
results5[2,6] =round(normal.function(data$ws30)$CI2[1],2)
results5[2,7] =round(normal.function(data$ws30)$CI2[2],2)
results5[3,2] =round(normal.function(data$wd30)$opt$par[1],2)
results5[3,3] =round(normal.function(data$wd30)$opt$par[2],2)
results5[3,4] =round(normal.function(data$wd30)$CI1[1],2)
results5[3,5] =round(normal.function(data$wd30)$CI1[2],2)
results5[3,6] =round(normal.function(data$wd30)$CI2[1],2)
results5[3,7] =round(normal.function(data$wd30)$CI2[2],2)
results5[4,2] =round(normal.function(bc.trans(opt.lambda.boxcox$maximum,data$pow.obs.norm))$opt$par[1],2)
results5[4,3] =round(normal.function(bc.trans(opt.lambda.boxcox$maximum,data$pow.obs.norm))$opt$par[2],2)
results5[4,4] =round(normal.function(bc.trans(opt.lambda.boxcox$maximum,data$pow.obs.norm))$CI1[1],2)
results5[4,5] =round(normal.function(bc.trans(opt.lambda.boxcox$maximum,data$pow.obs.norm))$CI1[2],2)
results5[4,6] =round(normal.function(bc.trans(opt.lambda.boxcox$maximum,data$pow.obs.norm))$CI2[1],2)
results5[4,7] =round(normal.function(bc.trans(opt.lambda.boxcox$maximum,data$pow.obs.norm))$CI2[2],2)
results5[5,2] =round(normal.function(trans1(opt.lambda.trans1$maximum,data$pow.obs.norm))$opt$par[1],2)
results5[5,3] =round(normal.function(trans1(opt.lambda.trans1$maximum,data$pow.obs.norm))$opt$par[2],2)
results5[5,4] =round(normal.function(trans1(opt.lambda.trans1$maximum,data$pow.obs.norm))$CI1[1],2)
results5[5,5] =round(normal.function(trans1(opt.lambda.trans1$maximum,data$pow.obs.norm))$CI1[2],2)
results5[5,6] =round(normal.function(trans1(opt.lambda.trans1$maximum,data$pow.obs.norm))$CI2[1],2)
results5[5,7] =round(normal.function(trans1(opt.lambda.trans1$maximum,data$pow.obs.norm))$CI2[2],2)
results5[6,2] =round(normal.function(trans2(opt.lambda.trans2$maximum,data$pow.obs.norm))$opt$par[1],2)
results5[6,3] =round(normal.function(trans2(opt.lambda.trans2$maximum,data$pow.obs.norm))$opt$par[2],2)
results5[6,4] =round(normal.function(trans2(opt.lambda.trans2$maximum,data$pow.obs.norm))$CI1[1],2)
results5[6,5] =round(normal.function(trans2(opt.lambda.trans2$maximum,data$pow.obs.norm))$CI1[2],2)
results5[6,6] =round(normal.function(trans2(opt.lambda.trans2$maximum,data$pow.obs.norm))$CI2[1],2)
results5[6,7] =round(normal.function(trans2(opt.lambda.trans2$maximum,data$pow.obs.norm))$CI2[2],2)
results5 %>%kbl() %>%kable_styling(full_width = FALSE)
results6 =matrix(NA,ncol=7, nrow=2)
colnames(results6) = c("Von Mises Distribution for"," Optimal Mean", "Optimal Kappa", "Lower CI Mean", "Upper CI Mean", "Lower CI Kappa", "Upper CI Kappa")
results6[1:2,1]=c("Wind Speed", "Wind direction")
results6[1,2] =round(Vonmieses.function(data$ws30)$opt$par[1],2)
results6[1,3] =round(Vonmieses.function(data$ws30)$opt$par[2],2)
results6[1,4] =round(Vonmieses.function(data$ws30)$CI1[1],2)
results6[1,5] =round(Vonmieses.function(data$ws30)$CI1[2],2)
results6[1,6] =round(Vonmieses.function(data$ws30)$CI2[1],2)
results6[1,7] =round(Vonmieses.function(data$ws30)$CI2[2],2)
results6[2,2] =round(Vonmieses.function(data$wd30)$opt$par[1],2)
results6[2,3] =round(Vonmieses.function(data$wd30)$opt$par[2],2)
results6[2,4] =round(Vonmieses.function(data$wd30)$CI1[1],2)
results6[2,5] =round(Vonmieses.function(data$wd30)$CI1[2],2)
results6[2,6] =round(Vonmieses.function(data$wd30)$CI2[1],2)
results6[2,7] =round(Vonmieses.function(data$wd30)$CI2[2],2)
results6 %>%kbl() %>%kable_styling(full_width = FALSE)
x <-data$pow.obs.norm
h<-hist(x, xlab="Power Obs",main="Fitting Beta distribution")
xfit<-seq(min(x),max(x),length=40)
yfit<-dbeta(xfit,beta.function(data$pow.obs.norm)$opt$par[1],beta.function(data$pow.obs.norm)$opt$par[2])
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
x <- circular(data$wd30)
h<-hist(x, xlab="Wind Speed",
main="Von Mises distribution")
library(numDeriv)
beta.function = function(dat){
# Define likelihood function:
Beta.likelihood=function(params,dat){ -sum(dbeta(x=dat,shape1=params[1], shape2=params[2], log=TRUE))}
# Find the optimal parameters using nlimnb:
opt=nlminb(c(0.01,0.01),Beta.likelihood, dat=dat)
# Find the Fisher information:
H=hessian(Beta.likelihood,opt$par, dat=dat)
se=sqrt(diag(solve(H)))
CI1=opt$par[1]+c(-1,1)*se[1]*qnorm(0.975)
CI2=opt$par[2]+c(-1,1)*se[2]*qnorm(0.975)
return(list("opt"=opt,"CI1"=CI1, "CI2"=CI2, "se"=se))
}
gamma.function.rep=function(dat){
# Define likelihood function:
Gamma.likelihood=function(params, dat){ -sum(dgamma(x=dat,shape=params[1]*params[2], rate=params[2], log=TRUE))}
# Find the optimal parameters using nlimnb:
opt=nlminb(c(0.01,0.01),Gamma.likelihood, dat=dat)
# Find the Fisher information:
H=hessian(Gamma.likelihood,opt$par, dat=dat)
se=sqrt(diag(solve(H)))
CI1=opt$par[1]+c(-1,1)*se[1]*qnorm(0.975)
CI2=opt$par[2]+c(-1,1)*se[2]*qnorm(0.975)
return(list("opt"=opt,"CI1"=CI1, "CI2"=CI2, "se"=se))
}
gamma.function.rep(data$pow.obs.norm)
beta.function.rep = function(dat){
# Define likelihood function:
Beta.likelihood=function(params,dat){ -sum(dbeta(x=dat,shape1=-(params[1]*params[2])/(params[1]-1), shape2=params[2], log=TRUE))}
# Find the optimal parameters using nlimnb:
opt=nlminb(c(0.01,0.01),Beta.likelihood, dat=dat)
# Find the Fisher information:
H=hessian(Beta.likelihood,opt$par, dat=dat)
se=sqrt(diag(solve(H)))
CI1=opt$par[1]+c(-1,1)*se[1]*qnorm(0.975)
CI2=opt$par[2]+c(-1,1)*se[2]*qnorm(0.975)
return(list("opt"=opt,"CI1"=CI1, "CI2"=CI2, "se"=se))
}
beta.function.rep(data$pow.obs.norm)
x <-data$pow.obs.norm
h<-hist(x, xlab="Power Obs",main="Fitting Beta distribution")
xfit<-seq(min(x),max(x),length=40)
yfit<-dbeta(xfit,gamma.function(data$pow.obs.norm)$opt$par[1],gamma.function(data$pow.obs.norm)$opt$par[2])
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
x <-data$pow.obs.norm
h<-hist(x, xlab="Power Obs",main="Fitting Gamma distribution")
xfit<-seq(min(x),max(x),length=40)
yfit<-dbeta(xfit,log.normal.function(data$pow.obs.norm)$opt$par[1],log.normal.function(data$pow.obs.norm)$opt$par[2])
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
x <-data$pow.obs.norm
h<-hist(x, xlab="Power Obs",main="Fitting Gamma distribution")
xfit<-seq(min(x),max(x),length=40)
yfit<-dgamma(xfit,gamma.function(data$pow.obs.norm)$opt$par[1],gamma.function(data$pow.obs.norm)$opt$par[2])
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
x <-data$pow.obs.norm
h<-hist(x, xlab="Power Obs",main="Fitting Gamma distribution")
xfit<-seq(min(x),max(x),length=40)
yfit<-dlnorm(xfit,log.normal.function(data$pow.obs.norm)$opt$par[1],log.normal.function(data$pow.obs.norm)$opt$par[2])
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
x <-data$pow.obs.norm
h<-hist(x, xlab="Power Obs",main="Fitting Log-normal distribution")
xfit<-seq(min(x),max(x),length=40)
yfit<-dlnorm(xfit,log.normal.function(data$pow.obs.norm)$opt$par[1],log.normal.function(data$pow.obs.norm)$opt$par[2])
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
x <-data$pow.obs.norm
h<-hist(x, xlab="Power Obs",main="Fitting Log-Normal distribution")
xfit<-seq(min(x),max(x),length=40)
yfit<-dlnorm(xfit,log.normal.function(data$pow.obs.norm)$opt$par[1],log.normal.function(data$pow.obs.norm)$opt$par[2])
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
Vonmieses.function=function(dat){
# Define likelihood function:
Vonmieses.likelihood=function(params,dat){ -sum(dvonmises(x=dat, mu=params[1], kappa=params[2], log=TRUE))}
# Find the optimal parameters using nlimnb:
opt=nlminb(c(1,1),Vonmieses.likelihood, dat=dat,lower = 0.1, upper = Inf)
# Find the Fisher information:
H=hessian(Vonmieses.likelihood,opt$par, dat=dat)
se=sqrt(diag(solve(H)))
CI1=opt$par[1]+c(-1,1)*se[1]*qnorm(0.975)
CI2=opt$par[2]+c(-1,1)*se[2]*qnorm(0.975)
return(list("opt"=opt,"CI1"=CI1, "CI2"=CI2, "se"=se))
}
qqPlot(mod2$residuals, main = "qqplot gamma regression")
qqPlot(mod2$residuals)
data <- read.delim("tuno.txt",header = TRUE, sep = " ", dec = ".")
data$pow.obs.norm<-(data$pow.obs)/5000
head(data,6)
mod1=lm(pow.obs.norm~ ws30+I(ws30^2), data=data)
summary(mod1)
AIC(mod1)
setwd("~/GitHub/Statistisk-Modellering-/Wind Power")
data <- read.delim("tuno.txt",header = TRUE, sep = " ", dec = ".")
data$pow.obs.norm<-(data$pow.obs)/5000
head(data,6)
mod1=lm(pow.obs.norm~ ws30+I(ws30^2), data=data)
summary(mod1)
AIC(mod1)
library(car)
qqPlot(mod1$residuals)
mod2=glm(pow.obs.norm~ ws30,family=Gamma,  data=data)
summary(mod2)
AIC(mod2)
qqPlot(mod2$residuals)
qqPlot(mod2$residuals, main = "qq-plot gamma regression")
library(betareg)
mod8=betareg(pow.obs.norm~ ws30, data=data)
summary(mod8)
AIC(mod8)
qqPlot(mod8$residuals, main = "qq-plot beta regression")
ws=0:100
plot(ws, 1.63430162*ws+(-0.03013925)*ws^2, type="l", ylim=c(-10,25))
abline(h=0)
x1.pred <- seq(0, 30, 0.1)
x2 = data$ws30
x1 =data$wd30
y = trans1(opt.lambda.trans1$minimum,data$pow.obs.norm)
fittrans1 = glm(y ~ 1 + x2 + I(x2^2) + cos(x1))
x1.pred <- seq(0, 30, 0.1)
x2 = data$ws30
x1 =data$wd30
y = trans1(opt.lambda.trans1$minimum,data$pow.obs.norm)
fittrans1 = glm(y ~ 1 + x2 + I(x2^2) + cos(x1))
data <- read.delim("tuno.txt",header = TRUE, sep = " ", dec = ".")
data$pow.obs.norm<-(data$pow.obs)/5000
head(data,6)
mod1=lm(pow.obs.norm~ ws30+I(ws30^2), data=data)
summary(mod1)
AIC(mod1)
library(car)
qqPlot(mod1$residuals)
mod2=glm(pow.obs.norm~ ws30,family=Gamma,  data=data)
summary(mod2)
AIC(mod2)
qqPlot(mod2$residuals, main = "qq-plot gamma regression")
library(betareg)
mod8=betareg(pow.obs.norm~ ws30, data=data)
summary(mod8)
AIC(mod8)
qqPlot(mod8$residuals, main = "qq-plot beta regression")
trans1 <- function(lambda,y){
y.l <- 1/lambda*log((y^lambda)/(1-y^lambda))
return(y.l)}
## profile likelihood for lambda
lp.lambda1 <- function(lambda,y){
mod <- lm(trans1(lambda,y)~data$ws30+I(data$ws30^2))
length(y)/2*log(summary(mod)$sigma^2) - sum(log(abs(1/(y*(1 - y^lambda)))))
}
#plot(seq(0.01,1,0.01), sapply(seq(0.01,1,0.01), lp.lambda1, y=data$pow.obs.norm))
(opt.lambda.trans1=optimize(lp.lambda1,c(0,1),y=data$pow.obs.norm))
mod3=glm(trans1(opt.lambda.trans1$minimum,data$pow.obs.norm)~ ws30+I(data$ws30^2),family=gaussian,  data=data)
summary(mod3)
AIC(mod3)
#Forsøg med sin og cos til wd
trans1 <- function(lambda,y){
y.l <- 1/lambda*log((y^lambda)/(1-y^lambda))
return(y.l)}
## profile likelihood for lambda
lp.lambda1 <- function(lambda,y){
mod <- lm(trans1(lambda,y)~data$ws30+I(data$ws30^2)+cos(data$wd30))
length(y)/2*log(summary(mod)$sigma^2) - sum(log(abs(1/(y*(1 - y^lambda)))))
}
(opt.lambda.trans1=optimize(lp.lambda1,c(0,1),y=data$pow.obs.norm))
library(car)
mod5=glm(trans1(opt.lambda.trans1$minimum,data$pow.obs.norm)~ data$ws30+I(data$ws30^2)+cos(data$wd30),family=gaussian,  data=data)
summary(mod5)
AIC(mod5)
#Forsøg med sin og cos til wd
trans1 <- function(lambda,y){
y.l <- 1/lambda*log((y^lambda)/(1-y^lambda))
return(y.l)}
## profile likelihood for lambda
lp.lambda1 <- function(lambda,y){
mod <- lm(trans1(lambda,y)~data$ws30+I(data$ws30^2)+cos(data$wd30))
length(y)/2*log(summary(mod)$sigma^2) - sum(log(abs(1/(y*(1 - y^lambda)))))
}
(opt.lambda.trans1=optimize(lp.lambda1,c(0,1),y=data$pow.obs.norm))
library(car)
mod6=glm(trans1(opt.lambda.trans1$minimum,data$pow.obs.norm)~data$ws30+I(data$ws30^2)+cos(data$wd30),family=gaussian,  data=data)
summary(mod6)
AIC(mod6)
Confint(mod6)
ws=0:100
plot(ws, 1.63430162*ws+(-0.03013925)*ws^2, type="l", ylim=c(-10,25))
abline(h=0)
# Function to plot the prediction result of regression model based on wind speed.
predictRegression.windSpeed <- function(x1.pred, x2, y, modelRegression, name){
dataFramePredict <- data.frame(x1 = x1.pred, x2 = rep(mean(x2), length(x1.pred)))
# Calculate predictions and intervals
valuePred <- predict.lm(modelRegression, dataFramePredict, se.fit = TRUE)
intervalPred <- predict.lm(modelRegression, newdata = dataFramePredict, interval = "pred", level = 0.95)
intervalConf <- predict.lm(modelRegression, newdata = dataFramePredict, interval = "conf", level = 0.95)
# plot
plot(dataFramePredict$x1, valuePred$fit, pch = 20, ylim = c(min(y, intervalPred), max(y, intervalPred)), xlim = c(min(x1, dataFramePredict$x1), max(x1, dataFramePredict$x1)), xlab = name, ylab = 'Transformed, Normalized Power Production')
matlines(dataFramePredict$x1, intervalPred, lty = c(1, 2, 2), col = c("black", "blue", "blue"), lwd = 2)
points(x1, y)  # Transformed observations
lines(dataFramePredict$x1, intervalConf[, 2], lty = 3, col = "red", lwd = 2)
lines(dataFramePredict$x1, intervalConf[, 3], lty = 3, col = "red", lwd = 2)
legend("bottomright", inset = .02, legend = c("Regression Curve", "Prediction Interval", "Confidence Intercal"), col = c("black", "blue", "red"), lty = c(1, 2, 3), lwd = c(2, 2, 2), cex = 0.8)
}
x1.pred <- seq(0, 30, 0.1)
x2 = data$ws30
x1 =data$wd30
y = trans1(opt.lambda.trans1$minimum,data$pow.obs.norm)
fittrans1 = glm(y ~ 1 + x2 + I(x2^2) + cos(x1))
predictRegression.windSpeed(x1.pred, x2, y, fittrans1,"Wind Direction")
x1.pred <- seq(0, 2*pi, 0.1)
x1.pred <- seq(0, 2*3.1415, 0.1)
x2 = data$ws30
x1 =data$wd30
y = trans1(opt.lambda.trans1$minimum,data$pow.obs.norm)
fittrans1 = glm(y ~ 1 + x2 + I(x2^2) + cos(x1))
predictRegression.windSpeed(x1.pred, x2, y, fittrans1,"Wind Direction")
plot(trans1(opt.lambda.trans1$minimum,data$pow.obs.norm), ylab = "Transformed, Normalized Power Production")
points(mod6$fitted.values, pch=16, col="Red")
#lines(interval_l, col)
setwd("~/GitHub/Statistisk-Modellering-/Wind Power")
data <- read.delim("tuno.txt",header = TRUE, sep = " ", dec = ".")
data$pow.obs.norm<-(data$pow.obs)/5000
head(data,6)
plot(data$r.day,data$pow.obs.norm,type='o')
trans1 <- function(lambda,y){
y.l <- 1/lambda*log((y^lambda)/(1-y^lambda))
return(y.l)}
## profile likelihood for lambda
lp.lambda1 <- function(lambda,y){
mod <- lm(trans1(lambda,y)~data$ws30+I(data$ws30^2)+cos(data$wd30))
length(y)/2*log(summary(mod)$sigma^2) - sum(log(abs(1/(y*(1 - y^lambda)))))
}
(opt.lambda.trans1=optimize(lp.lambda1,c(0,1),y=data$pow.obs.norm))
mod0=glm(trans1(opt.lambda.trans1$minimum,data$pow.obs.norm)~data$ws30+I(data$ws30^2)+cos(data$wd30),family=gaussian,  data=data)
mod0
e <- cbind(mod0$residuals[1:length(mod0$residuals)-1],mod0$residuals[2:length(mod0$residuals)])
# e <- cbind(mod0$residuals[2:length(mod0$residuals)],mod0$residuals[1:length(mod0$residuals)-1])
var(e);cor(e)
library(numDeriv)
library(mvtnorm)
normal.function=function(dat){
# Define likelihood function:
Normal.likelihood=function(params,dat){ -sum(dmvnorm(e, mean=c(0,0),sigma=params[1]*matrix(c(1,params[2], params[2],1), nrow=2),log=TRUE))}
# Find the optimal parameters using nlimnb:
opt=nlminb(c(0.01,0.01),Normal.likelihood,lower=c(0,-1),upper=c(Inf, 1), dat=dat)
# Find the Fisher information:
H=hessian(Normal.likelihood,opt$par, dat=dat)
se=sqrt(diag(solve(H)))
CI1=opt$par[1]+c(-1,1)*se[1]*qnorm(0.975)
CI2=opt$par[2]+c(-1,1)*se[2]*qnorm(0.975)
return(list("opt"=opt,"CI1"=CI1,"CI2"=CI2, "se"=se, "H"=H))
}
mod2<-normal.function(e)
mod2
sig1 = seq(9,15,length.out = 100)
rho1 = seq(0,0.7, length.out = 100)
par(mfrow=c(1,1))
ll.contour = function(sigma,rho, e){
n <- length(e) - 1
#print(co)
tmp=0
deter = sigma^2-rho^2*sigma^2
for (i in 1:n){
x=e[i]; y=e[i+1]
tmp = tmp + 1/2*( (-x/( sigma*(rho^2 - 1)) + y*rho/( sigma*(rho^2 - 1)))*x
+ (x*rho/( sigma*(rho^2 - 1)) - y/( sigma*(rho^2 - 1)))*y)
}
-2/2*log(2*pi)*n-1/2*log(deter)*n - tmp #1/(2*sigma) * sum((y[-1]-co*y[-(n+1)])^2)
}
ll<- outer(sig1,rho1,'ll.contour',e=e)
like<- exp(ll-max(ll))
contour(sig1,rho1,like,level=c(0.05,.1,.3,.5,.7,.9),
ylab=expression(rho),
xlab=expression(sigma^2))
title(expression('Likelihood contour'))
lines(c(0,50),c(0,0),lty=2,col=2)
normal.function=function(dat){
# Define likelihood function:
Normal.likelihood=function(params,dat){ -sum(dmvnorm(e, mean=c(0,0),sigma=params[1]*matrix(c(1,0,0,1), nrow=2),log=TRUE))}
# Find the optimal parameters using nlimnb:
opt=nlminb(c(0.01),Normal.likelihood,lower=c(0),upper=c(Inf), dat=dat)
# Find the Fisher information:
H=hessian(Normal.likelihood,opt$par, dat=dat)
se=sqrt(diag(solve(H)))
CI1=opt$par[1]+c(-1,1)*se[1]*qnorm(0.975)
#CI2=opt$par[2]+c(-1,1)*se[2]*qnorm(0.975)
return(list("opt"=opt,"CI1"=CI1,"se"=se, "H"=H))
}
mod3<-normal.function(e)
mod3
c = mod2$opt$objective-mod3$opt$objective
pchisq(-2*c, df=1,lower.tail = FALSE)
# parameter delt med se
z=mod2$opt$par[2]/mod2$se[2]
2*(1-pnorm(z))
rho<-mod2$opt$par[[2]]
n<-dim(e)[1]
sigma2 <- mod2$opt$par[[1]]
H=mod2$H
I<-matrix(NA, nrow=2, ncol=2)
I[1,1]=n/sigma2^2
I[1,2]=-n*rho/(sigma2*(1-rho^2))
I[2,1]=-n*rho/(sigma2*(1-rho^2))
I[2,2]=(n*(1+rho^2))/(1-rho^2)^2
(H-I)/H
## Plot profile likelihood
rho <- seq(0,0.999, length=200)
## Profile likelihood for rho
lp.rho <- function(rho1, dat){
#
# Define likelihood function:
Normal.likelihood = function(params,dat){ -sum(dmvnorm(dat, mean=c(0,0),sigma=params[1]*matrix(c(1,params[2],params[2],1), nrow=2),log=TRUE))}
fun.tmp <- function(sigma, rho1, dat){
-Normal.likelihood(c(sigma,rho1),dat)
}
## interval from plot
optimize(fun.tmp,c(0.001,100),rho1=rho1,
dat=dat,maximum=TRUE)$objective
}
Normal.likelihood = function(params,dat){ -sum(dmvnorm(dat, mean=c(0,0),sigma=params[1]*matrix(c(1,params[2],params[2],1), nrow=2),log=TRUE))}
optmvt = mod2$opt
par(mfrow=c(1,2))
llp <- sapply(rho, lp.rho, dat=e)
plot(rho,llp-max(llp),type="l", main = "Profile log-likelihood for rho", xlab = expression(rho), ylab="Likelihood", ylim=c(-10,0),xlim = c(0,0.8))
lines(optmvt$par[2]*c(1,1),c(0,-20),col="blue")
pll = function(theta,dat){-Normal.likelihood(theta,dat)}
obs.info = hessian(pll,optmvt$par,dat=e)
ql = 0.5* obs.info[2,2] * (rho-optmvt$par[2])^2
lines(rho, ql,lty=2, col="red")
plot(rho,exp(llp-max(llp)),type="l", main = "Normalized profile likelihood for rho", xlab = expression(rho), ylab="Likelihood")
lines(optmvt$par[2]*c(1,1),c(0,1),col="blue",ylim = c(0,1), xlim = c(0,0.8))
lines(range(rho),
exp(-c(1,1) * qchisq(0.95,df=1)/2),
col=6,lty=2)
lines(rho, exp(ql-max(ql)),lty=2, col="red")
sig1 = seq(10,20,length.out = 100)
z = 1/2*log((1+rho)/(1-rho))
log_s = log(sig1)
llmvt.trans = function(theta,e){
# theta = log(sigma), z
sigma = exp(theta[1])
rho = (exp(2*theta[2]) - 1)/(exp(2*theta[2]) + 1)
Normal.likelihood(c(sigma,rho),e)
}
lp.z <- function(z, x){
#rho = (exp(2*z) - 1)/(exp(2*z) + 1)
fun.tmp <- function(log_s, z, x){
#sigma = exp(log_s)
-llmvt.trans(c(log_s,z),x)
}
## interval from plot
optimize(fun.tmp,c(-1000,1000),z=z,
x=x,maximum=TRUE)$objective
}
opt.trans = nlminb(c(0,0),llmvt.trans,e=e)
llp <- sapply(z,lp.z,x=e)
par(mfrow=c(1,2))
plot(rho,(llp-max(llp)),type="l", main = "Profile likelihood for z", xlab = expression(rho), ylab="Likelihood", ylim=c(-10,0))
pll.trans = function(theta,e){-llmvt.trans(theta,e)}
obs.info = hessian(pll.trans,opt.trans$par,e=e)
ql = 0.5* obs.info[2,2] * (z-opt.trans$par[2])^2
lines(rho, ql,lty=2, col="red")
lines(optmvt$par[2]*c(1,1),c(0,-20),col="blue")
plot(rho,exp(llp-max(llp)),type="l", main = "Profile likelihood for z", xlab = expression(rho), ylab="Likelihood")
lines(optmvt$par[2]*c(1,1),c(0,1),col="blue")
lines(range(z), exp(-c(1,1) * qchisq(0.95,df=1)/2), col=2,lty=2)
lines(rho, exp(ql-max(ql)),lty=2, col="red")
e <- residuals(mod0)
nll.ar1 <- function(pars,e){
n <- length(e)
sigma <- pars[1]
#sigma <- exp(pars[1])
rho <- (exp(2*pars[2])-1)/(1+exp(2*pars[2]))
- sum(dnorm(e[-1], mean = rho*e[-n], sd = sqrt(sigma), log = TRUE))
}
pars <- c(2,0.2)
opt.ar1 <- nlminb(pars,nll.ar1,e=e,lower=c(0,-Inf),upper=c(Inf,Inf))
#opt.ar1 <- nlminb(pars,nll.ar1,e=e,lower=c(-Inf,-Inf),upper=c(Inf,Inf))
(opt.ar1)
e <- residuals(mod0)
nll.ar1 <- function(pars,e){
n <- length(e)
sigma <- pars[1]
#sigma <- exp(pars[1])
rho <- (exp(2*pars[2])-1)/(1+exp(2*pars[2]))
sigma0 <- sigma / (1-rho^2)
-dnorm(e[1], sd = sqrt(sigma0), log = TRUE)-sum(dnorm(e[-1], mean = rho*e[-n], sd = sqrt(sigma), log = TRUE))
}
pars <- c(2,0.2)
#opt.ar1 <- nlminb(pars,nll.ar1,e=e,lower=c(-Inf,-Inf),upper=c(Inf,Inf))
opt.ar1.full <- nlminb(pars,nll.ar1,e=e,lower=c(0,-Inf),upper=c(Inf,Inf))
opt.ar1.full
e <- cbind(mod0$residuals[1:length(mod0$residuals)-1],mod0$residuals[2:length(mod0$residuals)])
#e <- residuals(mod0)
nll.ar1.full <- function(pars,y,X){
n <- length(y)
y.hat <- X%*%pars[1:dim(X)[2]]
pars <- pars[-(1:dim(X)[2])]
e<-y-y.hat
sigma <- exp(pars[1])
rho <- (exp(2*pars[2])-1)/(1+exp(2*pars[2]))
sigma0 <- sigma / (1-rho^2)
- dnorm(e[1], sd = sqrt(sigma0), log = TRUE) - sum(dnorm(e[-1], mean = rho*e[-n], sd=sqrt(sigma), log = TRUE))
}
params <- c(coef(mod0),opt.ar1.full$par)
X <-model.matrix(mod0)
(opt <- nlminb(c(params)*0, nll.ar1.full, y=trans1(opt.lambda.trans1$minimum,data$pow.obs.norm), X=X))
rbind(coef(mod0), opt$par[1:4])
acf(mod0$residuals)
error=rep(NA, (n-1))
for( i in 1:(n-1)){
y = e[i,2]*opt.ar1.full$par[2]+rnorm(1, mean=0, sd=opt.ar1.full$par[2])
error[i]= e[i,1]-y
}
acf(error)
acf(mod0$residuals)
acf(mod0$residuals, main = "Autocorrelation of linear model")
acf(mod0$residuals, main = "Autocorrelation of linear model")
acf(mod0$residuals, main = "Autocorrelation of linear model")
acf(error, main = "Autocorrelation of AR(1) model")
