y=data$AIDS_yes[2]
m=data$n[1]
n=data$n[2]
N=m+n
t=x+y
# Example 4.4
x<- 25; m<- 170
y<- 44; n<- 168
that<- log(x/(m-x)*(n-y)/y)
se2<- 1/x + 1/(m-x) + 1/y + 1/(n-y)
se<- sqrt(se2)
ehat<- log(y/(n-y))
#print(c(that,ehat))
cat('theta-hat=',that,',  se=',se,'\n')
# plots
par(mfrow=c(2,2))
th<- seq(-2,2,len=1000)
et<- seq(-2,0,len=1000)
fun1<- function(theta,eta){
a <- exp(theta+eta)
b<- exp(eta)
x*theta + (x+y)*eta - m*log(1+a) - n*log(1+b)
}
ll<- outer(th,et,'fun1')
like<- exp(ll-max(ll))
contour(th,et,like,level=c(.1,.3,.5,.7,.9),
xlab=expression(beta_0),
ylab=expression(beta_1))
title(expression('Likelihood contour'))
abline(v=that,h=ehat,lwd=.4)
lik1<- apply(like,1,max)
plot(th,lik1,type='n',xlab=expression(beta_0),
ylab='Likelihood')
lines(th,lik1)
abline(h=.15,lwd=.4)
abline(v=0)
title(expression('Profile likelihood'))
# getting likelihood of H0
a<- approx(th,lik1,xout=0)$y
print(a)
# getting likelihood interval
#a <- li(th,lik1,0.15)
#cat('95% CI for theta=',a,'\n')
# finding optimal parameters
fun2<- function(th){
theta = th[1]
eta = th[2]
a <- exp(theta+eta)
b <- exp(eta)
-(x*theta + (x+y)*eta - m*log(1+a) - n*log(1+b))
}
opt <- nlminb(c(0, 0), fun2)
(opt$par)
#Load data
data.time <- read.delim("actg320.txt",header = TRUE, sep = "", dec = ".")
head(data.time,2)
#Count number of patient without treatment and without AIDS
(sum(data.time$tx == 0 & data.time$event == 0))
#Count number of patient without treatment and AIDS
(sum(data.time$tx == 0 & data.time$event == 1))
#Count number of patient with treatment and without AIDS
(sum(data.time$tx == 1 & data.time$event == 0))
# Count number of patient with treatment and AIDS
(sum(data.time$tx == 1 & data.time$event == 1))
#Calculating proportions
#No aids out of people without treatment
(sum(data.time$tx == 0 & data.time$event == 0))/sum(data.time$tx == 0)
#Aids out of people without treatment
(sum(data.time$tx == 0 & data.time$event == 1))/sum(data.time$tx == 0)
#No Aids out of people with treatment
(sum(data.time$tx == 1 & data.time$event == 0))/sum(data.time$tx == 1)
#Aids out of people with treatment
(sum(data.time$tx == 1 & data.time$event == 1))/sum(data.time$tx == 1)
# Likelihood function for all patients with treat and without treatment. (event=1 is treatment). (pxep is used to define the probability after a certain point in time)
exp.likelihood=function(rate){
-sum(dexp(x=data.time$time[data.time$event==1], rate=rate, log=TRUE))- sum(pexp(q=data.time$time[data.time$event==0], lower.tail = FALSE, rate=rate, log=TRUE))
}
(nlminb(start=0.5,objective = exp.likelihood,lower=0)$par)
(nlminb(start=0.5,objective = exp.likelihood,lower=0)$objective)
#(optimize(exp.likelihood,c(0, 100),maximum=TRUE)$maximum)
# Likelihood function for no treatment group. (p = cumulative function, d=density function)
exp.likelihood_no_treat=function(rate){
-sum(dexp(x=data.time$time[data.time$event==1 & data.time$tx == 0], rate=rate, log=TRUE))- sum(pexp(q=data.time$time[data.time$event==0 & data.time$tx == 0], lower.tail = FALSE, rate=rate, log=TRUE))
}
(nlminb(start=0.5,objective = exp.likelihood_no_treat,lower=0)$par)
(nlminb(start=0.5,objective = exp.likelihood_no_treat,lower=0)$objective)
# Likelihood function for treatment group
exp.likelihood_with_treat=function(rate){
-sum(dexp(x=data.time$time[data.time$event==1 & data.time$tx == 1], rate=rate, log=TRUE))- sum(pexp(q=data.time$time[data.time$event==0 & data.time$tx == 1], lower.tail = FALSE, rate=rate, log=TRUE))
}
(nlminb(start=0.5,objective = exp.likelihood_with_treat,lower=0)$par)
(nlminb(start=0.5,objective = exp.likelihood_with_treat,lower=0)$objective )
# Implement negative log likelihood function
nll.exp <- function(rate){
# Part for people with Aids
val1 <- -sum(dexp(x=data.time$time[data.time$event==1],rate=exp(-rate[1]-rate[2]*data.time$tx[data.time$event==1]),log=TRUE))
# Part for people without Aids
val2 <- -sum(log(1-pexp(q=data.time$time[data.time$event==0],rate=exp(-rate[1]-rate[2]*data.time$tx[data.time$event==0]))))
val1+val2
}
nll.exp(c(7,1))
# Find optimal rate:
opt.exp<- optim(c(7,1),nll.exp, hessian=T)
#opt.exp <- nlminb(start=c(0.001,0.005),objective=nll.exp,lower=c(-Inf,-Inf))
opt$par
opt$hessian
# b1 -  is the treatment effect
(opt.exp$par[2])
#Making a confidence interval
HE <- hessian(nll.exp,opt.exp$par)
se <- sqrt(diag(solve(HE)))
#Confidence interval for b1
(opt.exp$par[2]+c(-1,1)*qnorm(0.975)*se[2])
nll.b1 <- function(rate,b1){
val1 <- -sum(dexp(x=data.time$time[data.time$event==1],rate=rate[1]+b1*data.time$tx[data.time$event==1],log=TRUE))
val2 <- -sum(pexp(q=data.time$time[data.time$event==0],rate=rate[1]+b1*data.time$tx[data.time$event==0],lower.tail=F,log=TRUE))
val1+val2
}
profile.b1 <- function(b1){
opt <- nlminb(start=c(0.001),objective=nll.exp,lower=c(-Inf),b1=b1)
b0 <-opt$par
-nll.b1(c(b0),b1)
}
b1 <- seq(-0.0005,0.0005,0.00001)
n_b1 = length(b1)
p = rep(NaN,n_b1)
# for (i in 1:length(b1)) {
#    p[i] = exp(profile.b1(b1[i]))
#  }
#
# plot(b1,p/max(p),'l')
n_b1 = length(b1)
profile.b1.plot = rep(NaN,n_b1)
for (i in 1:length(b1)){
profile.b1.plot[i] = profile.b1(b1[i])
}
data <- read.delim("Logistic.txt",header = TRUE, sep = "", dec = ".")
data$AIDS_no=data$n-data$AIDS_yes
head(data,2)
source('C:/Users/kathr/AppData/Local/Temp/Temp3_lkpack.zip/LKPACK/EX6-3.R', echo=TRUE)
source('C:/Users/kathr/AppData/Local/Temp/Temp3_lkpack.zip/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
load("~/GitHub/Statistisk-Modellering-/surgery.dat")
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
setwd("~/GitHub/Statistisk-Modellering-")
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
(b0hat)
(b1hat)
source('~/GitHub/Statistisk-Modellering-/LKPACK/EX6-3.R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/Logistic regression fit (Kat).R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/Logistic regression fit (Kat).R', echo=TRUE)
source('~/GitHub/Statistisk-Modellering-/Logistic regression fit (Kat).R', echo=TRUE)
(b0hat)
(b1hat)
data <- read.delim('loads.txt')
data <- read.delim('loads.txt')
head(data,2)
head(data,2)
library(survival)
library(survival)
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
library(survival)
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
library(survival)
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
(mod1$value)
library(survival)
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
(mod1$coefficients)
library(survival)
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
(mod1$coefficients["load"])
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b2 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
((-exp(b0+b1)*log(0.5))/(-exp(b0)*log(0.5))
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b2 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
((-exp(b0+b1)*log(0.5))/(-exp(b0)*log(0.5)))
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b1 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
((-exp(b0+b1)*log(0.5))/(-exp(b0)*log(0.5)))
(exp(b1))
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b1 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
((-exp(b0+b1)*log(0.5))/(-exp(b0)*log(0.5)))
(exp(b1))
# Time ratio for effect of load
((-exp(b0+b2)*log(0.5))/(-exp(b0)*log(0.5)))
(exp(b2))
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b1 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
print('effect of bearings')
((-exp(b0+b1)*log(0.5))/(-exp(b0)*log(0.5)))
(exp(b1))
# Time ratio for effect of load
print('effect of load')
((-exp(b0+b2)*log(0.5))/(-exp(b0)*log(0.5)))
(exp(b2))
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b1 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
print('effect of bearings')
#((-exp(b0+b1)*log(0.5))/(-exp(b0)*log(0.5)))
(exp(b2))
# Time ratio for effect of load
print('effect of load')
#((-exp(b0+b2)*log(0.5))/(-exp(b0)*log(0.5)))
(exp(b1))
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b1 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
exp(cbind(coef(mod1)[2],confint(mod1)[2, 1], confint(mod1)[2, 2]))
print('effect of bearings')
#((-exp(b0+b1)*log(0.5))/(-exp(b0)*log(0.5)))
(exp(b2))
# Time ratio for effect of load
print('effect of load')
#((-exp(b0+b2)*log(0.5))/(-exp(b0)*log(0.5)))
(exp(b1))
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b1 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
exp(cbind(coef(mod1)[1],confint(mod1)[1, 1], confint(mod1)[1, 1]))
exp(cbind(coef(mod1)[2],confint(mod1)[2, 1], confint(mod1)[2, 2]))
exp(cbind(coef(mod1)[3],confint(mod1)[3, 1], confint(mod1)[3, 3]))
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b1 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
exp(cbind(coef(mod1)[1],confint(mod1)[1, 1], confint(mod1)[1, 2]))
exp(cbind(coef(mod1)[2],confint(mod1)[2, 1], confint(mod1)[2, 2]))
exp(cbind(coef(mod1)[3],confint(mod1)[3, 1], confint(mod1)[3, 2]))
print('effect of bearings')
#((-exp(b0+b1)*log(0.5))/(-exp(b0)*log(0.5)))
(exp(b2))
# Time ratio for effect of load
print('effect of load')
#((-exp(b0+b2)*log(0.5))/(-exp(b0)*log(0.5)))
(exp(b1))
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b1 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
print('Time Ratios for load and bearings')
exp(cbind(coef(mod1)[1],confint(mod1)[1, 1], confint(mod1)[1, 2]))
exp(cbind(coef(mod1)[2],confint(mod1)[2, 1], confint(mod1)[2, 2]))
exp(cbind(coef(mod1)[3],confint(mod1)[3, 1], confint(mod1)[3, 2]))
data <- read.delim('loads.txt')
head(data,5)
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b1 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
print('Time Ratios for load and bearings')
exp(cbind(coef(mod1)[1],confint(mod1)[1, 1], confint(mod1)[1, 2]))
exp(cbind(coef(mod1)[2],confint(mod1)[2, 1], confint(mod1)[2, 2]))*5
exp(cbind(coef(mod1)[3],confint(mod1)[3, 1], confint(mod1)[3, 2]))
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b1 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
print('Time Ratios for load and bearings')
exp(cbind(coef(mod1)[1],confint(mod1)[1, 1], confint(mod1)[1, 2]))
exp(cbind(coef(mod1)[2],confint(mod1)[2, 1], confint(mod1)[2, 2])*5)
exp(cbind(coef(mod1)[3],confint(mod1)[3, 1], confint(mod1)[3, 2]))
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b1 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
print('Time Ratios for load and bearings')
exp(cbind(coef(mod1)[1],confint(mod1)[1, 1], confint(mod1)[1, 2]))
exp(cbind(coef(mod1)[2],confint(mod1)[2, 1], confint(mod1)[2, 2])*5)
exp(cbind(coef(mod1)[3],confint(mod1)[3, 1], confint(mod1)[3, 2]))
round(exp(cbind(TR = coef(mod1),confint(mod1))),4)
round(exp(cbind(HR = -coef(mod2),-confint(mod2)[,2:1])),4)
round(exp(cbind(HR = -coef(mod1),-confint(mod1)[,2:1])),4)
loads$CoxSnell <- loads$failtime*exp(-mod1$linear.predictors)surv2 <- survfit(Surv(CoxSnell, fail==1)~1 , data = loads)plot(surv2$time, -log(surv2$surv))abline(a=0, b=1)
loads$CoxSnell <- loads$failtime*exp(-mod1$linear.predictors)
loads$CoxSnell <- loads$failtime*exp(-mod1$linear.predictors)
data = loads
loads = data
loads$CoxSnell <- loads$failtime*exp(-mod1$linear.predictors)
surv2 <- survfit(Surv(CoxSnell, fail==1)~1 , data = loads)
plot(surv2$time, -log(surv2$surv))
abline(a=0, b=1)
mod3 <- survreg(Surv(failtime, fail) ~ load + bearings, data = loads,dist="weibull")
summary(mod3)
mod2 <- survreg(Surv(failtime, fail) ~ load + bearings, data = loads,dist="weibull")
summary(mod2)
exp(cbind(coef(mod1)[1],confint(mod1)[1, 1], confint(mod1)[1, 2]))
exp(cbind(coef(mod1)[2],confint(mod1)[2, 1], confint(mod1)[2, 2])*5)
exp(cbind(coef(mod1)[3],confint(mod1)[3, 1], confint(mod1)[3, 2]))
exp(cbind(coef(mod2)[1],confint(mod2)[1, 1], confint(mod2)[1, 2]))
exp(cbind(coef(mod2)[2],confint(mod2)[2, 1], confint(mod2)[2, 2])*5)
exp(cbind(coef(mod2)[3],confint(mod2)[3, 1], confint(mod2)[3, 2]))
mod2 <- survreg(Surv(failtime, fail) ~ load + bearings, data = loads,dist="weibull")
summary(mod2)
exp(cbind(coef(mod2)[1],confint(mod2)[1, 1], confint(mod2)[1, 2]))
exp(cbind(coef(mod2)[2],confint(mod2)[2, 1], confint(mod2)[2, 2])*5)
exp(cbind(coef(mod2)[3],confint(mod2)[3, 1], confint(mod2)[3, 2]))
data <- read.delim('loads.txt')
head(data,5)
library(survival)
#Fitting the exponential function
mod1 <- survreg(Surv(failtime, fail == 1) ~ load + bearings, data = data,dist = "exponential")
summary(mod1)
confint(mod1)
# Time ratio for bearings effect
b0 <- (mod1$coefficients["(Intercept)"])
b1 <- (mod1$coefficients["load"])
b2 <- (mod1$coefficients["bearings"])
print('Time Ratios for load and bearings')
exp(cbind(coef(mod1)[1],confint(mod1)[1, 1], confint(mod1)[1, 2]))
exp(cbind(coef(mod1)[2],confint(mod1)[2, 1], confint(mod1)[2, 2])*5)
exp(cbind(coef(mod1)[3],confint(mod1)[3, 1], confint(mod1)[3, 2]))
round(exp(cbind(HR = -coef(mod1),-confint(mod1)[,2:1])),4)
loads = data
loads$CoxSnell <- loads$failtime*exp(-mod1$linear.predictors)
surv2 <- survfit(Surv(CoxSnell, fail==1)~1 , data = loads)
plot(surv2$time, -log(surv2$surv))
abline(a=0, b=1)
mod2 <- survreg(Surv(failtime, fail) ~ load + bearings, data = loads,dist="weibull")
summary(mod2)
exp(cbind(coef(mod2)[1],confint(mod2)[1, 1], confint(mod2)[1, 2]))
exp(cbind(coef(mod2)[2],confint(mod2)[2, 1], confint(mod2)[2, 2])*5)
exp(cbind(coef(mod2)[3],confint(mod2)[3, 1], confint(mod2)[3, 2]))
exp(-0.2143/mod2$scale)
exp(-0.2143/mod2$scale)
#Hazard ratio when increasing load by 5 kvA
exp(c(0.0604,0.072551,0.048163)*5/mod3$scale)
exp(-0.2143/mod2$scale)
#Hazard ratio when increasing load by 5 kvA
#exp(c(0.0604,0.072551,0.048163)*5/mod3$scale)
summary(mod2)
loads$CS3 <- exp((log(loads$failtime)-mod3$linear.predictors)/mod3$scale)
surv3 <- survfit(Surv(CS3, fail==1)~1 , data = loads)
plot(surv3$time, -log(surv3$surv))
abline(a=0, b=1)
data <- read.delim("Logistic.txt",header = TRUE, sep = "", dec = ".")
data$AIDS_no=data$n-data$AIDS_yes
head(data,2)
data <- read.delim("Logistic.txt",header = TRUE, sep = "", dec = ".")
data$AIDS_no=data$n-data$AIDS_yes
head(data,2)
data.time <- read.delim("actg320.txt",header = TRUE, sep = "", dec = ".")
head(data.time,2)
# Treated group
(sum(data.time$event == 1 & data.time$tx == 1 ))
# Non treated group
(sum(data.time$event == 1 & data.time$tx == 0 ))
print('Follow up for new treatment group')
(sum(data.time$time[data.time$tx == 0])/365)
print('Follow up for new treatment group')
(sum(data.time$time[data.time$tx == 1])/365)
library(survival)
Surv.ByTreat <- survfit(Surv(time, event == 1) ~ tx,conf.type = "log-log",data = data.time)
plot(Surv.ByTreat, conf.int = T, las = 1, xlab = "Days",ylab = "Estimated Survival Prob.", col=2:3, lwd = 2, ylim=c(0.8,1))
legend("bottomleft", col=2:3, c("Control","Treated"), lwd=2)
plot(Surv.ByTreat, fun=function(x) { 1- x }, conf.int = F,las = 1, xlab = "Days",ylab = "Estimated Failure Prob.", col=2:3, lwd = 2)
legend("topleft", col=2:3, c("Control","Treated"), lwd=2)
# I would prefer the survival function as it is more positive to think about a survival probability than it is about a failure probability
# Log rank test
# To test if the is a difference between two survival curves
survdiff(Surv(time, event == 1) ~ tx, data = data.time)
data <- read.delim("Logistic.txt",header = TRUE, sep = "", dec = ".")
data$AIDS_no=data$n-data$AIDS_yes
head(data,2)
AZT <- c(rep(1, 170), rep(0,168))
AZT
AIDS
len(AZT)
AZT <- c(rep(1, 170), rep(0,168))
AIDS <- c(rep(1, 25), rep(0, 145), rep(1, 44), rep(0, 124))
length(AZT)
length(AIDS)
df <- data.frame("AZT" = c(rep(1, 170), rep(0,168)), "AIDS" = c(rep(1, 25), rep(0, 145), rep(1, 44), rep(0, 124)))
AZT <- c(rep(1, 170), rep(0,168))
AIDS <- c(rep(1, 25), rep(0, 145), rep(1, 44), rep(0, 124))
length(AZT)
length(AIDS)
mod2 <- survreg(Surv())
df <- data.frame("AZT" = c(rep(1, 170), rep(0,168)), "AIDS" = c(rep(1, 25), rep(0, 145), rep(1, 44), rep(0, 124)))
AZT <- c(rep(1, 170), rep(0,168))
AIDS <- c(rep(1, 25), rep(0, 145), rep(1, 44), rep(0, 124))
length(AZT)
length(AIDS)
mod2 <- survreg(Surv(AIDS) ~ AZT, data = df, dist = "logistic")
df <- data.frame("AZT" = c(rep(1, 170), rep(0,168)), "AIDS" = c(rep(1, 25), rep(0, 145), rep(1, 44), rep(0, 124)))
AZT <- c(rep(1, 170), rep(0,168))
AIDS <- c(rep(1, 25), rep(0, 145), rep(1, 44), rep(0, 124))
head(df)
length(AZT)
length(AIDS)
mod2 <- survreg(Surv(AIDS) ~ AZT, data = df, dist = "logistic")
df <- data.frame("AZT" = c(rep(1, 170), rep(0,168)), "AIDS" = c(rep(1, 25), rep(0, 145), rep(1, 44), rep(0, 124)))
head(df, )
length(AZT)
length(AIDS)
mod2 <- survreg(Surv(AIDS) ~ AZT, data = df, dist = "logistic")
summary(mod2)
exp(coef(mod2)[2]/mod2$scale)
(confint(mod4)[2, 1],confint(mod4)[2, 2])
(confint(mod4)[2, 2])
(confint(mod2)[2, 2])
(confint(mod2)[2, 2])
(confint(mod2)[2, 1])
(confint(mod2)[2, 2])
confint(mod2)
```{r}
confint(mod2)
